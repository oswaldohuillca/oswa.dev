---
import HeaderLink from "./HeaderLink.astro";
import { SITE_TITLE } from "../consts";
// const site = "https://www.figma.com/community/file/961427082834428618";
---

<header
	class="fixed w-full bg-gradient-to-b from-primary-foreground to-transparent from-40% to-100% z-50"
>
	<nav class="w-full">
		<div class="container flex justify-between items-center py-6">
			<a href="/" class="text-2xl font-bold">{SITE_TITLE}</a>
			<!-- <div class="flex gap-4 font-bold">
				<HeaderLink href="/about">About</HeaderLink>
				<HeaderLink href="/blog">Blog</HeaderLink>
			</div> -->
			<div class="flex items-center gap-2">
				<a
					href="https://github.com/oswaldohuillca/oswa.dev"
					target="_blank"
					rel="nofollow noopener"
					title="https://github.com/oswaldohuillca/oswa.dev"
					class="mx-auto flex justify-center items-center text-xl font-semibold rounded-lg border border-transparent"
				>
					<span class="icon-[ant-design--github-outlined]"></span>
				</a>
				<div>
					<button
						type="button"
						class="hs-dark-mode-active:hidden hs-dark-mode group flex items-center text-xl hover:text-blue-600 font-medium dark:text-gray-400 dark:hover:text-gray-500"
						data-hs-theme-click-value="dark"
						aria-label="Dark Mode"
					>
						<span class="icon-[solar--moon-bold-duotone]"></span>
					</button>
					<button
						type="button"
						class="hs-dark-mode-active:flex hidden hs-dark-mode group text-xl items-center font-medium"
						data-hs-theme-click-value="light"
						aria-label="Light Mode"
					>
						<span class="icon-[ph--sun-duotone]"></span>
					</button>
				</div>
			</div>
		</div>
	</nav>
</header>

<script>
	type Theme = "default" | "light" | "dark" | "auto";
	const HSThemeAppearance = {
		init() {
			const defaultTheme: Theme = "default";
			let theme: Theme =
				(localStorage.getItem("hs_theme") as Theme) || defaultTheme;

			if (document.querySelector("html")?.classList.contains("dark")) return;
			this.setAppearance(theme);
		},
		_resetStylesOnLoad() {
			const $resetStyles = document.createElement("style");
			$resetStyles.innerText = `*{transition: unset !important;}`;
			$resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
			document.head.appendChild($resetStyles);
			return $resetStyles;
		},
		setAppearance(
			theme: Theme,
			saveInStore = true,
			dispatchEvent: boolean | undefined | HTMLInputElement = true,
		) {
			const $resetStylesEl = this._resetStylesOnLoad();

			if (saveInStore) {
				localStorage.setItem("hs_theme", theme);
			}

			if (theme === "auto") {
				theme = window.matchMedia("(prefers-color-scheme: dark)").matches
					? "dark"
					: "default";
			}

			document.querySelector("html")?.classList.remove("dark");
			document.querySelector("html")?.classList.remove("default");
			document.querySelector("html")?.classList.remove("auto");

			document
				?.querySelector("html")
				?.classList.add(this.getOriginalAppearance());

			setTimeout(() => {
				$resetStylesEl.remove();
			});

			if (dispatchEvent) {
				window.dispatchEvent(
					new CustomEvent("on-hs-appearance-change", { detail: theme }),
				);
			}
		},
		getAppearance() {
			let theme = this.getOriginalAppearance();
			if (theme === "auto") {
				theme = window.matchMedia("(prefers-color-scheme: dark)").matches
					? "dark"
					: "default";
			}
			return theme;
		},
		getOriginalAppearance() {
			const defaultTheme = "default";
			return localStorage.getItem("hs_theme") || defaultTheme;
		},
	};
	HSThemeAppearance.init();

	window
		.matchMedia("(prefers-color-scheme: dark)")
		.addEventListener("change", (e) => {
			if (HSThemeAppearance.getOriginalAppearance() === "auto") {
				HSThemeAppearance.setAppearance("auto", false);
			}
		});

	window.addEventListener("load", () => {
		const $clickableThemes = document.querySelectorAll(
			"[data-hs-theme-click-value]",
		);
		const $switchableThemes = document.querySelectorAll<HTMLInputElement>(
			"[data-hs-theme-switch]",
		);

		$clickableThemes.forEach(($item) => {
			$item.addEventListener("click", () =>
				HSThemeAppearance.setAppearance(
					($item.getAttribute("data-hs-theme-click-value") as Theme) || "light",
					true,
					$item as HTMLInputElement,
				),
			);
		});

		$switchableThemes.forEach(($item) => {
			$item.addEventListener("change", (e) => {
				const target = e.target as EventTarget & { checked: boolean };
				HSThemeAppearance.setAppearance(target.checked ? "dark" : "default");
			});

			$item.checked = HSThemeAppearance.getAppearance() === "dark";
		});

		window.addEventListener("on-hs-appearance-change", (e) => {
			$switchableThemes.forEach(($item) => {
				//@ts-ignore
				$item.checked = e.detail === "dark";
			});
		});
	});
</script>
